import numpy as np
import cv2
from numpy import cos, sin



def GetP(I, rvec, tvec):
    """
        this function generate projection matrix of camera
    """
    R = cv2.Rodrigues(rvec)[0]
    print(R)
    P = np.dot(I,np.concatenate((R, tvec.T), axis=1))
    return P

def Get_P_from_dataset(dataset_name):
    '''
    dataset_name: string of dataset name
    
    return P matrix for each camera
    
    '''
    if dataset_name=='ETHZ_dataset2':
        #This dataset has two cameras,
        #will return two P matrix   
        #cam1
        I1 = np.array([[801.25700,0,325.05589], [0,802.24324,243.29150], [0.0, 0.0, 1.0]])
        R1 = np.array([[1.0,0.0,0.0], [0.0,1.0,0.0], [0.0, 0.0, 1.0]])
        tvec1 = np.array([[0, 0, 0]])
        #cam2
        I2 = np.array([[804.81163,0,335.67663], [0,805.19672,232.42614], [0.0, 0.0, 1.0]])
        R2 = np.array([[0.999923235343999,-0.005513666805298,0.011096075772572], [0.005431036122504,0.999957401012593,   0.007463243716854], [-0.011136752930121, -0.007402407615178, 0.999910584550275]])
        tvec2 = np.array([[-0.6192593383286313, -0.0007428029644263, -0.0142760640908179]])
        
        P1 = np.dot(I1,np.concatenate((R1, tvec1.T), axis=1))
        P2 = np.dot(I2,np.concatenate((R2, tvec2.T), axis=1))
        
        return P1,P2
    elif dataset_name=='ETHZ_dataset1':
        #This dataset has two cameras,
        #will return two P matrix   
        #cam1
        I1 = np.array([[500.68330, 0, 318.57250],[0,  500.25257, 247.11452],[0, 0, 1]])
        R1 = np.array([[1.0,0.0,0.0], [0.0,1.0,0.0], [0.0, 0.0, 1.0]])
        tvec1 = np.array([[0, 0, 0]])
        #cam2
        ([[500.80696, 0, 307.20573],[0, 500.39406, 233.52064],[0, 0, 1]])
        
        I2 = np.array([[500.80696, 0, 307.20573],[0, 500.39406, 233.52064],[0, 0, 1]])
         
        R2 = np.array([[0.994584465424537,0.008137584213299,0.103612358622704],
          [-0.008733820371460,0.999947802720680,0.005302095416238],
          [-0.103563804091524,-0.006178313463662,0.994603623020164]])
        tvec2 = np.array([[-399.96195,0.66913,22.45476 ]])
        
        P1 = np.dot(I1,np.concatenate((R1, tvec1.T), axis=1))
        P2 = np.dot(I2,np.concatenate((R2, tvec2.T), axis=1))
        
        return P1,P2
    
    elif dataset_name=='EPFL_RLC_MultiCamera':
        #This dataset has THREE cameras,
        #will return THREE P matrix 
        #cam0
        fcx = 1.024574782293333e+03/4
        fcy = 1.024574782293333e+03/4
        cx = 1.0366183693e+03/4
        cy = 5.9419916551e+01/4
        I1 = np.array([[fcx,0.0,cx], [0.0,fcy,cy], [0.0, 0.0, 1.0]])
        #from rodrigues tansform
        R1 = np.array([[0.987739982019249,0.155092717951757,0.0177757351169998],
        [0.0301534280020610,-0.301272120502894,0.953061320266127],
        [0.153168203946960,-0.940840771993873,-0.302255095992832]])
#         R1 = np.array([[0.0935529417213016,-0.568455503014917,0.817377628876242],
#                       [0.291205749971721,-0.769452761562050,-0.568455503014917],
#                       [0.952075132685808,0.291205749971721,0.0935529417213016]])
        tx,ty,tz = 2.1832767031e+03,3.4506736437e+03,5.2739192961e+03
        tvec1 = np.array([[tx, ty, tz]])
        rx,ry,rz = -1.8749,-0.1340,-0.1237
        rvec1 = np.array([rx, ry, rz])
        #P1 = GetP(I1, rvec1, tvec1)
        P1 = np.dot(I1,np.concatenate((R1, tvec1.T), axis=1))
        
        #cam1
        fcx = 1.013975267200000e+03/4  
        fcy = 1.013975267200000e+03/4
        cx = 9.0414676533e+02/4
        cy = 5.9171430888e+02/4
        I2 = np.array([[fcx,0.0,cx], [0.0,fcy,cy], [0.0, 0.0, 1.0]])
        #from rodrigues tansform
        R2 = np.array([[-0.766931272654909,-0.641643694984762,0.0104781539511434],
                       [0.251670219744492,-0.285711267627842,0.924678956202774],
                       [-0.590320695484819,0.711802247985207,0.380603515808151]])
        tx,ty,tz = -6.1645840896e+02,9.3628248549e+01,4.6428884327e+03
        tvec2 = np.array([[tx, ty, tz]])
        rx,ry,rz = -0.4967, 1.4020,2.0846
        rvec2 = np.array([rx, ry, rz])
        #P2 = GetP(I2, rvec2, tvec2)
        P2 = np.dot(I2,np.concatenate((R2, tvec2.T), axis=1))
        
        #cam2
        fcx = 1.042994250080000e+03/4
        fcy = 1.042994250080000e+03/4
        cx = 9.5052991916e+02/4
        cy = 5.1593041352e+02/4
        I3 = np.array([[fcx,0.0,cx], [0.0,fcy,cy], [0.0, 0.0, 1.0]])
        #from rodrigues tansform
        R3 = np.array([[0.937903012350336,-0.346816604029730,0.00749550488303263],
                      [0.124298791400845,0.356159292804920,0.926121141430746],
                      [-0.323863782909506,-0.867680126151328,0.377151758316940]])
        tx,ty,tz = -9.3054055093e+02,4.3227709422e+02,4.1095871013e+03
        tvec3 = np.array([[tx, ty, tz]])
        rx,ry,rz = -1.1697,0.2161,0.3072
        rvec3 = np.array([rx, ry, rz])
        #P3 = GetP(I3, rvec3, tvec3)
        P3 = np.dot(I3,np.concatenate((R3, tvec3.T), axis=1))
        
        return P1,P2,P3
    
    elif dataset_name=='WildTrack':
        I4 = np.array([[1725.2772216796875, 0.0, 995.0142211914062], [0.0, 1720.581787109375, 520.4190063476562], [0.0, 0.0, 1.0]])
        I6 = np.array([[1742.977783203125, 0.0, 1001.0738525390625], [0.0, 1746.0140380859375, 362.4325866699219], [0.0, 0.0, 1.0]])
        rvec4 = np.array([1.6647210121154785, 0.9668620228767395, -0.6937940120697021])
        tvec4 = np.array([[42.36193084716797, -45.360652923583984, 1106.8572998046875]])
        rvec6 = np.array([1.6907379627227783, -0.3968360126018524, 0.355197012424469])
        tvec6 = np.array([[-338.5532531738281, 62.87659454345703, 1044.094482421875]])
        
        I1 = np.array([[1743.4478759765625, 0.0, 934.5202026367188], [0.0, 1735.1566162109375, 444.3987731933594], [0.0, 0.0, 1.0]])
        I2 = np.array([[1707.266845703125, 0.0, 978.1306762695312], [0.0, 1719.0408935546875, 417.01922607421875], [0.0, 0.0, 1.0]])
        I3 = np.array([[1738.7144775390625, 0.0, 906.56689453125], [0.0, 1752.8876953125, 462.0346374511719], [0.0, 0.0, 1.0]])
        I4 = np.array([[1725.2772216796875, 0.0, 995.0142211914062], [0.0, 1720.581787109375, 520.4190063476562], [0.0, 0.0, 1.0]])
        I5 = np.array([[1708.6573486328125, 0.0, 936.0921630859375], [0.0, 1737.1904296875, 465.18243408203125], [0.0, 0.0, 1.0]])
        I6 = np.array([[1742.977783203125, 0.0, 1001.0738525390625], [0.0, 1746.0140380859375, 362.4325866699219], [0.0, 0.0, 1.0]])
        I7 = np.array([[1732.4674072265625, 0.0, 931.2559204101562], [0.0, 1757.58203125, 459.43389892578125], [0.0, 0.0, 1.0]])

        #external matrix
        rvec1 = np.array([ 1.759099006652832, 0.46710100769996643, -0.331699013710022])
        tvec1 = np.array([[-525.8941650390625, 45.40763473510742, 986.7235107421875]])

        rvec2 = np.array([0.6167870163917542, -2.14595890045166, 1.6577140092849731])
        tvec2 = np.array([[1195.231201171875, -336.5144958496094, 2040.53955078125]])

        rvec3 = np.array([0.5511789917945862, 2.229501962661743, -1.7721869945526123])
        tvec3 = np.array([[55.07157897949219, -213.2444610595703, 1992.845703125]])

        rvec4 = np.array([1.6647210121154785, 0.9668620228767395, -0.6937940120697021])
        tvec4 = np.array([[42.36193084716797, -45.360652923583984, 1106.8572998046875]])

        rvec5 = np.array([1.2132920026779175, -1.4771349430084229, 1.2775369882583618])
        tvec5 = np.array([[836.6625366210938, 85.86837005615234, 600.2880859375]])

        rvec6 = np.array([1.6907379627227783, -0.3968360126018524, 0.355197012424469])
        tvec6 = np.array([[-338.5532531738281, 62.87659454345703, 1044.094482421875]])

        rvec7 = np.array([1.6439390182495117, 1.126188039779663, -0.7273139953613281])
        tvec7 = np.array([[-648.9456787109375, -57.225215911865234, 1052.767578125]])

        P1 = GetP(I1, rvec1, tvec1)
        P2 = GetP(I2, rvec2, tvec2)
        P3 = GetP(I3, rvec3, tvec3)
        P4 = GetP(I4, rvec4, tvec4)
        P5 = GetP(I5, rvec5, tvec5)
        P6 = GetP(I6, rvec6, tvec6)
        
#         return P4, P6
        return P1, P6
           
    if dataset_name=='CMU':                 
        I2 = np.array([[1397.86, 0, 940.272],[0, 1394.99, 557.201],[0, 0, 1]])
        R2 = np.array([[ -0.9954486556, 0.0517891332, -0.07999912286], 
                        [-0.03178756508, 0.6109350877, 0.7910422677], 
                        [0.08984166452, 0.7899849393, -0.6065082613]])
        tvec2 = np.array([[-19.66312955, 67.48416783, 378.3425172]])
           
        I17 = np.array([[1394.17, 0, 917.845],[0, 1391.28, 563.165],[0, 0, 1]])
        R17 = np.array([[0.5252054106, 0.09377148473, -0.8457932285],
               [-0.5977533385, 0.748067942, -0.2882452091],
               [0.6056816185, 0.6569636694, 0.4489415487]])
        tvec17 = np.array([[15.26884706, 94.81400059, 365.5040826]]) 
        
        I6 = np.array([[1397.06,0,951.324],[0,1393.61,548.802],[0,0,1]])
        R6 = np.array([[0.9526902996,-0.04878471384,-0.3000020746],
                       [-0.1958615622,0.6562345106,-0.7286937048],
                       [0.2324208285,0.752978299,0.6156332023]])
        tvec6 = np.array([[-8.934845719, 80.47056857, 380.5787661]])
        
        I7 = np.array([[1396.88,0,948.235],[0,1393.97,548.349],[0,0,1]])
        R7 = np.array([[-0.9498962922,-0.03743977275,0.310314836],
                      [0.1652605565,0.7825244996,0.6002868947],
                      [-0.2653035667,0.621493098,-0.7371298031]])  
        tvec7 = np.array([[-6.386436819, 115.9390247, 356.116209]])
       
      
        P2 = np.dot(I2,np.concatenate((R2, tvec2.T), axis=1))
        P6 = np.dot(I2,np.concatenate((R6, tvec6.T), axis=1))
        P7 = np.dot(I2,np.concatenate((R7, tvec7.T), axis=1))
        P17 = np.dot(I17,np.concatenate((R17, tvec17.T), axis=1))
        
        P1,P2 = P6, P7
        return P1,P2
        
    else:
        raise Exception('Optiones: ETHZ_dataset2, EPFL_RLC_MultiCamera, WildTrack')
        
        
   
        
        